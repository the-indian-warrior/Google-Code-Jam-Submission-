1.)

import numpy as np

t = int(input())

for i in range(t):
    n = int(input())

    hell = [[] * 3] * 3
    
    hell = np.zeros((n, n))
    
#to have a count
    coR = 0
    coC = 0

    for j in range(n):
        s = input().split(" ")
        rowp = []
        for k in s:
            if k in rowp:
                coR += 1
                #incrementing if present in rowp
                break
            rowp.append(k)
        
        for k in range(len(s)):
            hell[k][j] = s[k]
    
    for j in hell:
        rowp = []
        for k in j:
            if k in rowp:
                coC += 1
                break
            rowp.append(k)

#to print casewise
    print("Case #" + str(i + 1) + ":", int(hell.trace()) ,coR, coC)



-------------

2.)

#include <iostream>

#include <bits/stdc++.h>

using namespace std;

long long int t,a,x=0;

int main() 

{


cin>>t;

string s[t],str[t];
string tmp;

for(int i=0;i<t;i++)

{

   cin>>s[i];

   str[i]="";

   int len=s[i].length();
   
   // only if len greater than 0

   if(len>0)

   {

       a=s[i][0]-'0';

//loop till j is equal to a
       for(int j=1;j<=a;j++)

       {
           str[i].push_back('('); 
           x++;

       }

       str[i].push_back(s[i][0]);

   }

   for(int j=1; j<len; j++)

   {   a=s[i][j-1]-'0';

       int tt=s[i][j]-'0';

       if(x==0)

       {

           for(int k=1;k<=tt;k++)

           {

               str[i].push_back('('); x++;

           }

           str[i].push_back(s[i][j]); continue;

       }

       if((tt)<(a))

       {

           int diff=(a)-(tt);



           for(int k=1;k<=diff;k++)

           {

               str[i].push_back(')'); x--;

           }

            str[i].push_back(s[i][j]);continue;

       }

       if((tt)==(a))

       {


            str[i].push_back(s[i][j]);continue;


       }
       if((tt)>(a))

       {    if(tt<x){

           for(int k=1;k<=x;k++)

           {

               str[i].push_back(')');

           } 
           x=0;}

           int re=x;

           for(int k=re;k<tt;k++)

           {

               str[i].push_back('('); x++;

           }



           str[i].push_back(s[i][j]);continue;



       }

   }

   // to do only when x is not equal to 0
   while(x!=0)

   {

       str[i].push_back(')'); x--;

   }

    
}


for(int i=1; i<=t; i++)

{

    cout<<"Case #"<<i<<": "<<str[i-1]<<endl;

    
}


return 0;

    
}



----------

3.)

#include<bits/stdc++.h>

#define int long long int

#define fori for(int i=0;i<n;i++)

#define hello ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

using namespace std;

signed main()
{
    hello

    
    int f;

    cin>>f;
    for(int k=1;k<=f;k++)
    {

    // For case wise result
        cout<<"Case #"<<k<<": ";
        int op;
        
        cin>>op;

        
        map<int,int> mm; //map consisting two int
        map<pair<int,int>,queue<int>> mmm; // pairing
        vector<pair<int,int>> v;
        int l[op];
        for(int i=0;i<op;i++)
        {
            cin>>l[i];
            int x;cin>>x;
            mmm[{l[i],x}].push(i);
            v.push_back({l[i],x});
        }
        sort(v.begin(),v.end()); //Sorting is done
        
        int q=0,w=0;
        
        bool bb=true; //let initially bb be true
        char ans[op];
        for(int i=0;i<op;i++)
        {
            if(q<=v[i].first)
            {
                q=v[i].second;
                ans[mmm[{v[i].first,v[i].second}].front()]='C';
                mmm[{v[i].first,v[i].second}].pop();
            }
            else if(w<=v[i].first)
            {
                w=v[i].second;
                ans[mmm[{v[i].first,v[i].second}].front()]='J';
                mmm[{v[i].first,v[i].second}].pop();
            }
            else
            {
                bb=false;
                break;
            }
        }
        if(bb)
        {
            for(int i=0;i<op;i++)
            {
                cout<<ans[i];
            }cout<<endl;
        }
        else cout<<"IMPOSSIBLE"<<endl;
    }

    return 0;
}

-------


4.)
import java.util.*;
import java.io.*;
public class Solution
{
    public static void main(String args[])throws Exception
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw=new PrintWriter(System.out);
        int t=Integer.parseInt(br.readLine());
        for(int x=0;x<t;x++)
        {
            String str[]=br.readLine().split(" ");
            int n=Integer.parseInt(str[0]);
            int k=Integer.parseInt(str[1]);
            if(n==2)
            {
                if(k==3)
                pw.println("Case #"+(x+1)+": IMPOSSIBLE");
                else
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    if(k==4)
                    {
                        pw.println("2 1");
                        pw.println("1 2");
                    }
                    if(k==2)
                    {
                        pw.println("1 2");
                        pw.println("2 1");
                    }
                }
            }
            else if(n==3)
            {
                if(k==3)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 2 3");
                    pw.println("3 1 2");
                    pw.println("2 3 1");
                }
                else if(k==6)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("2 1 3");
                    pw.println("3 2 1");
                    pw.println("1 3 2");
                }
                else if(k==9)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("3 1 2");
                    pw.println("2 3 1");
                    pw.println("1 2 3");
                }
                else
                pw.println("Case #"+(x+1)+": IMPOSSIBLE");
            }
            else if(n==4)
            {
                if(k==4)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 2 3 4");
                    pw.println("2 1 4 3");
                    pw.println("3 4 1 2");
                    pw.println("4 3 2 1");
                }
                else if(k==6)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 2 3 4");
                    pw.println("2 1 4 3");
                    pw.println("3 4 2 1");
                    pw.println("4 3 1 2");
                }
                else if(k==7)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 2 3 4");
                    pw.println("3 1 4 2");
                    pw.println("4 3 2 1");
                    pw.println("2 4 1 3");
                }
                else if(k==8)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("2 3 4 1");
                    pw.println("1 2 3 4");
                    pw.println("4 1 2 3");
                    pw.println("3 4 1 2");
                }
                else if(k==9)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 4 2 3");
                    pw.println("3 1 4 2");
                    pw.println("4 2 3 1");
                    pw.println("2 3 1 4");
                }
                else if(k==10)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 4 3 2");
                    pw.println("4 1 2 3");
                    pw.println("2 3 4 1");
                    pw.println("3 2 1 4");
                }
                else if(k==11)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 4 3 2");
                    pw.println("4 2 1 3");
                    pw.println("2 3 4 1");
                    pw.println("3 1 2 4");
                }
                else if(k==12)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("3 4 1 2");
                    pw.println("2 3 4 1");
                    pw.println("1 2 3 4");
                    pw.println("4 1 2 3");
                }
                else if(k==13)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("2 4 3 1");
                    pw.println("4 3 1 2");
                    pw.println("1 2 4 3");
                    pw.println("3 1 2 4");
                }
                else if(k==14)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("3 4 2 1");
                    pw.println("4 3 1 2");
                    pw.println("1 2 4 3");
                    pw.println("2 1 3 4");
                }
                else if(k==16)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("4 1 2 3");
                    pw.println("3 4 1 2");
                    pw.println("2 3 4 1");
                    pw.println("1 2 3 4");
                }
                else
                pw.println("Case #"+(x+1)+": IMPOSSIBLE");
            }
            else if(n==5)
            {
                if(k==5)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 2 3 4 5");
                    pw.println("5 1 2 3 4");
                    pw.println("4 5 1 2 3");
                    pw.println("3 4 5 1 2");
                    pw.println("2 3 4 5 1");
                }
                else if(k==7)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 4 3 2 5");
                    pw.println("2 1 4 5 3");
                    pw.println("5 3 2 4 1");
                    pw.println("3 2 5 1 4");
                    pw.println("4 5 1 3 2");
                }
                else if(k==8)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("1 5 3 2 4");
                    pw.println("5 3 2 4 1");
                    pw.println("4 2 1 3 5");
                    pw.println("2 4 5 1 3");
                    pw.println("3 1 4 5 2");
                }
                else if(k==9)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("3 4 2 1 5");
                    pw.println("1 2 3 5 4");
                    pw.println("5 3 1 4 2");
                    pw.println("4 1 5 2 3");
                    pw.println("2 5 4 3 1");
                }
                else if(k==10)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("2 3 4 5 1");
                    pw.println("1 2 3 4 5");
                    pw.println("5 1 2 3 4");
                    pw.println("4 5 1 2 3");
                    pw.println("3 4 5 1 2");
                }
                else if(k==11)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("3 1 5 4 2");
                    pw.println("2 3 4 1 5");
                    pw.println("1 5 2 3 4");
                    pw.println("5 4 1 2 3");
                    pw.println("4 2 3 5 1");
                }
                else if(k==12)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 4 1 3 2");
                    pw.println("1 2 5 4 3");
                    pw.println("2 1 3 5 4");
                    pw.println("4 3 2 1 5");
                    pw.println("3 5 4 2 1");
                }
                else if(k==13)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 1 2 4 3");
                    pw.println("2 3 1 5 4");
                    pw.println("1 4 3 2 5");
                    pw.println("3 5 4 1 2");
                    pw.println("4 2 5 3 1");
                }
                else if(k==14)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 1 2 4 3");
                    pw.println("3 4 1 5 2");
                    pw.println("1 5 3 2 4");
                    pw.println("2 3 4 1 5");
                    pw.println("4 2 5 3 1");
                }
                else if(k==15)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 2 4 1 3");
                    pw.println("1 4 5 3 2");
                    pw.println("3 5 1 2 4");
                    pw.println("2 1 3 4 5");
                    pw.println("4 3 2 5 1");
                }
                else if(k==16)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 2 3 1 4");
                    pw.println("1 5 4 3 2");
                    pw.println("3 4 1 2 5");
                    pw.println("2 1 5 4 3");
                    pw.println("4 3 2 5 1");
                }
                else if(k==17)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 2 4 1 3");
                    pw.println("3 5 1 2 4");
                    pw.println("4 1 2 3 5");
                    pw.println("1 3 5 4 2");
                    pw.println("2 4 3 5 1");
                }
                else if(k==18)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 2 1 3 4");
                    pw.println("1 5 4 2 3");
                    pw.println("2 4 3 1 5");
                    pw.println("3 1 5 4 2");
                    pw.println("4 3 2 5 1");
                }
                else if(k==19)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 1 3 2 4");
                    pw.println("4 5 2 1 3");
                    pw.println("1 3 4 5 2");
                    pw.println("3 2 1 4 5");
                    pw.println("2 4 5 3 1");
                }
                else if(k==20)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 2 1 3 4");
                    pw.println("4 5 2 1 3");
                    pw.println("3 1 4 2 5");
                    pw.println("2 3 5 4 1");
                    pw.println("1 4 3 5 2");
                }
                else if(k==21)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 2 1 3 4");
                    pw.println("4 5 3 2 1");
                    pw.println("2 3 4 1 5");
                    pw.println("3 1 5 4 2");
                    pw.println("1 4 2 5 3");
                }
                else if(k==22)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 4 3 2 1");
                    pw.println("4 5 1 3 2");
                    pw.println("2 1 4 5 3");
                    pw.println("1 3 2 4 5");
                    pw.println("3 2 5 1 4");
                }
                else if(k==23)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 3 4 1 2");
                    pw.println("4 5 2 3 1");
                    pw.println("1 4 5 2 3");
                    pw.println("3 2 1 4 5");
                    pw.println("2 1 3 5 4");
                }
                else if(k==25)
                {
                    pw.println("Case #"+(x+1)+": POSSIBLE");
                    pw.println("5 1 2 3 4");
                    pw.println("4 5 1 2 3");
                    pw.println("3 4 5 1 2");
                    pw.println("2 3 4 5 1");
                    pw.println("1 2 3 4 5");
                }
                else
                pw.println("Case #"+(x+1)+": IMPOSSIBLE");
            }
        }
        pw.flush();
        pw.close();
    }
}